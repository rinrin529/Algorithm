#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;
int bfs(vector<int> mat[], int count[], int vertex);

int main(void) {
	int vertex = 0;     // vertex <= 100
	int net = 0;
	int a = 0, b = 0;
	int count[103] = { 0, };

	cin >> vertex;
	cin >> net;

	if (vertex > 100) {
		return 0;
	}
	else if(vertex==1|| net==0) {
		cout << 0;
		return 0;
	}
	else {
		vector<int> mat[103];

		for (int i = 0; i < net; i++) {
			cin >> a >> b;
			mat[a].push_back(b);
			mat[b].push_back(a);
		}
		for (int i = 1; i < 103; i++) {
			sort(mat[i].begin(), mat[i].end());
		}

		int result = bfs(mat, count, vertex);
		cout << result;

		return 0;
	}
}

int bfs(vector<int> mat[], int count[], int vertex)
{
	int cnt = 0;
	int temp = 0;
	queue<int> q;
	q.push(1);
	count[1] = 1;

	while (!q.empty()) {
		temp = q.front();
		q.pop();
		for (int i = 0; i < mat[temp].size(); i++) {
			if (count[mat[temp][i]] == 0) {
				cnt++;
				count[mat[temp][i]] = 1;
				q.push(mat[temp][i]);
			}
		}
	}

	return cnt;
}
